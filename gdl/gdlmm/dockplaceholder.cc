// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gdlmm/dockplaceholder.h>
#include <gdlmm/private/dockplaceholder_p.h>

#include <gdl/gdl-dock-placeholder.h>
/* Copyright (c) 2009  Fabien Parent <parent.f@gmail.com>
 *
 * This file is part of gdlmm.
 *
 * gdlmm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * gdlmm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Gdl
{

} // namespace Gdl

namespace
{
} // anonymous namespace


namespace Glib
{

Gdl::DockPlaceholder* wrap(GdlDockPlaceholder* object, bool take_copy)
{
  return dynamic_cast<Gdl::DockPlaceholder *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gdl
{


/* The *_Class implementation: */

const Glib::Class& DockPlaceholder_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &DockPlaceholder_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gdl_dock_placeholder_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void DockPlaceholder_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* DockPlaceholder_Class::wrap_new(GObject* o)
{
  return manage(new DockPlaceholder((GdlDockPlaceholder*)(o)));

}


/* The implementation: */

DockPlaceholder::DockPlaceholder(const Glib::ConstructParams& construct_params)
:
  DockObject(construct_params)
{
  }

DockPlaceholder::DockPlaceholder(GdlDockPlaceholder* castitem)
:
  DockObject((GdlDockObject*)(castitem))
{
  }

DockPlaceholder::~DockPlaceholder()
{
  destroy_();
}

DockPlaceholder::CppClassType DockPlaceholder::dockplaceholder_class_; // initialize static member

GType DockPlaceholder::get_type()
{
  return dockplaceholder_class_.init().get_type();
}


GType DockPlaceholder::get_base_type()
{
  return gdl_dock_placeholder_get_type();
}


DockPlaceholder::DockPlaceholder(const Glib::ustring name, const DockObject& object, DockPlacement position, bool sticky)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  DockObject(Glib::ConstructParams(dockplaceholder_class_.init(), "name", name.c_str(), "object", object.gobj(), "position", ((GdlDockPlacement)(position)), "sticky", static_cast<int>(sticky), static_cast<char*>(0)))
{
  

}

void DockPlaceholder::attach(DockObject& object)
{
gdl_dock_placeholder_attach(gobj(), object.gobj()); 
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> DockPlaceholder::property_floating() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "floating");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<int> DockPlaceholder::property_floatx() const
{
  return Glib::PropertyProxy_ReadOnly<int>(this, "floatx");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<int> DockPlaceholder::property_floaty() const
{
  return Glib::PropertyProxy_ReadOnly<int>(this, "floaty");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<int> DockPlaceholder::property_height() 
{
  return Glib::PropertyProxy<int>(this, "height");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<int> DockPlaceholder::property_height() const
{
  return Glib::PropertyProxy_ReadOnly<int>(this, "height");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<int> DockPlaceholder::property_width() 
{
  return Glib::PropertyProxy<int>(this, "width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<int> DockPlaceholder::property_width() const
{
  return Glib::PropertyProxy_ReadOnly<int>(this, "width");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<DockObject*> DockPlaceholder::property_host() 
{
  return Glib::PropertyProxy<DockObject*>(this, "host");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<DockObject*> DockPlaceholder::property_host() const
{
  return Glib::PropertyProxy_ReadOnly<DockObject*>(this, "host");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<DockPlacement> DockPlaceholder::property_next_placement() 
{
  return Glib::PropertyProxy<DockPlacement>(this, "next-placement");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<DockPlacement> DockPlaceholder::property_next_placement() const
{
  return Glib::PropertyProxy_ReadOnly<DockPlacement>(this, "next-placement");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> DockPlaceholder::property_sticky() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "sticky");
}
#endif //GLIBMM_PROPERTIES_ENABLED


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Gdl


