// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gdlmm/dockbar.h>
#include <gdlmm/private/dockbar_p.h>

#include <gdl/gdl-dock-bar.h>
/* Copyright (c) 2009  Fabien Parent <parent.f@gmail.com>
 *
 * This file is part of gdlmm.
 *
 * gdlmm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * gdlmm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <gdl/gdl-dock-master.h>

namespace Gdl
{

DockBar::DockBar(Dock& dock)
:
  Glib::ObjectBase(0),
  Gtk::Box(Glib::ConstructParams(dockbar_class_.init(), "master", GDL_DOCK_OBJECT_GET_MASTER(dock.gobj()), (char*) 0))
{

}

} // namespace Gdl

namespace
{
} // anonymous namespace


namespace Glib
{

Gdl::DockBar* wrap(GdlDockBar* object, bool take_copy)
{
  return dynamic_cast<Gdl::DockBar *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gdl
{


/* The *_Class implementation: */

const Glib::Class& DockBar_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &DockBar_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gdl_dock_bar_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void DockBar_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* DockBar_Class::wrap_new(GObject* o)
{
  return manage(new DockBar((GdlDockBar*)(o)));

}


/* The implementation: */

DockBar::DockBar(const Glib::ConstructParams& construct_params)
:
  Gtk::Box(construct_params)
{
  }

DockBar::DockBar(GdlDockBar* castitem)
:
  Gtk::Box((GtkBox*)(castitem))
{
  }

DockBar::~DockBar()
{
  destroy_();
}

DockBar::CppClassType DockBar::dockbar_class_; // initialize static member

GType DockBar::get_type()
{
  return dockbar_class_.init().get_type();
}


GType DockBar::get_base_type()
{
  return gdl_dock_bar_get_type();
}


Gtk::Orientation DockBar::get_orientation() const
{
  return ((Gtk::Orientation)(gdl_dock_bar_get_orientation(const_cast<GdlDockBar*>(gobj()))));
}

void DockBar::set_orientation(Gtk::Orientation orientation)
{
gdl_dock_bar_set_orientation(gobj(), ((GtkOrientation)(orientation))); 
}

void DockBar::set_style(DockBarStyle style)
{
gdl_dock_bar_set_style(gobj(), ((GdlDockBarStyle)(style))); 
}

DockBarStyle DockBar::get_style() const
{
  return ((DockBarStyle)(gdl_dock_bar_get_style(const_cast<GdlDockBar*>(gobj()))));
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<DockBarStyle> DockBar::property_dockbar_style() 
{
  return Glib::PropertyProxy<DockBarStyle>(this, "dockbar-style");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<DockBarStyle> DockBar::property_dockbar_style() const
{
  return Glib::PropertyProxy_ReadOnly<DockBarStyle>(this, "dockbar-style");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< Glib::RefPtr<DockMaster> > DockBar::property_master() 
{
  return Glib::PropertyProxy< Glib::RefPtr<DockMaster> >(this, "master");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< Glib::RefPtr<DockMaster> > DockBar::property_master() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<DockMaster> >(this, "master");
}
#endif //GLIBMM_PROPERTIES_ENABLED


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Gdl


