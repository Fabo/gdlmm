// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GDLMM_DOCKMASTER_H
#define _GDLMM_DOCKMASTER_H


#include <glibmm.h>

/* Copyright (c) 2009  Fabien Parent <parent.f@gmail.com>
 *
 * This file is part of gdlmm.
 *
 * gdlmm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * gdlmm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <glibmm/object.h>
#include "dockobject.h"

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GdlDockMaster GdlDockMaster;
typedef struct _GdlDockMasterClass GdlDockMasterClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gdl
{ class DockMaster_Class; } // namespace Gdl
namespace Gdl
{


/** @addtogroup gdlmmEnums Enums and Flags */

/**
 * @ingroup gdlmmEnums
 */
enum SwitcherStyle
{
  SWITCHER_STYLE_TEXT,
  SWITCHER_STYLE_ICON,
  SWITCHER_STYLE_BOTH,
  SWITCHER_STYLE_TOOLBAR,
  SWITCHER_STYLE_TABS,
  SWITCHER_STYLE_NONE
};


class DockMaster : public Glib::Object
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef DockMaster CppObjectType;
  typedef DockMaster_Class CppClassType;
  typedef GdlDockMaster BaseObjectType;
  typedef GdlDockMasterClass BaseClassType;

private:  friend class DockMaster_Class;
  static CppClassType dockmaster_class_;

private:
  // noncopyable
  DockMaster(const DockMaster&);
  DockMaster& operator=(const DockMaster&);

protected:
  explicit DockMaster(const Glib::ConstructParams& construct_params);
  explicit DockMaster(GdlDockMaster* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~DockMaster();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GdlDockMaster*       gobj()       { return reinterpret_cast<GdlDockMaster*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GdlDockMaster* gobj() const { return reinterpret_cast<GdlDockMaster*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GdlDockMaster* gobj_copy();

private:


protected:
  DockMaster();

public:
  
  static Glib::RefPtr<DockMaster> create();

  
  void add(DockObject& object);
  
  
  void remove(DockObject& object);
  
  
  GdlDockObject* get_object(const Glib::ustring& nick_name) const;
  
  
  GdlDockObject* get_controller() const;
  
  
  void set_controller(DockObject& object);
  
  
  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Titre par défaut pour les objets détachables flottants nouvellement créés.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<Glib::ustring> property_default_title() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Titre par défaut pour les objets détachables flottants nouvellement créés.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<Glib::ustring> property_default_title() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  
  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Si défini à 1
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<int> property_locked() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Si défini à 1
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<int> property_locked() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  
  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Style des boutons de basculement.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<SwitcherStyle> property_switcher_style() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Style des boutons de basculement.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<SwitcherStyle> property_switcher_style() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  
  /**
   * @par Prototype:
   * <tt>void on_my_%layout_changed()</tt>
   */

  Glib::SignalProxy0< void > signal_layout_changed();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

protected:
  //GTK+ Virtual Functions (override these to change behaviour):
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

  //Default Signal Handlers::
#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
  virtual void on_layout_changed();
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


};

} // namespace Gdl


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gdl::DockMaster
   */
  Glib::RefPtr<Gdl::DockMaster> wrap(GdlDockMaster* object, bool take_copy = false);
}


#endif /* _GDLMM_DOCKMASTER_H */

