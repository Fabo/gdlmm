// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GDLMM_DOCKLAYOUT_H
#define _GDLMM_DOCKLAYOUT_H


#include <glibmm.h>

/* Copyright (c) 2009  Fabien Parent <parent.f@gmail.com>
 *
 * This file is part of gdlmm.
 *
 * gdlmm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * gdlmm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <glibmm/object.h>
#include <string>

#include "dock.h"
#include "dockmaster.h"

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GdlDockLayout GdlDockLayout;
typedef struct _GdlDockLayoutClass GdlDockLayoutClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gdl
{ class DockLayout_Class; } // namespace Gdl
namespace Gdl
{


class DockLayout : public Glib::Object
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef DockLayout CppObjectType;
  typedef DockLayout_Class CppClassType;
  typedef GdlDockLayout BaseObjectType;
  typedef GdlDockLayoutClass BaseClassType;

private:  friend class DockLayout_Class;
  static CppClassType docklayout_class_;

private:
  // noncopyable
  DockLayout(const DockLayout&);
  DockLayout& operator=(const DockLayout&);

protected:
  explicit DockLayout(const Glib::ConstructParams& construct_params);
  explicit DockLayout(GdlDockLayout* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~DockLayout();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GdlDockLayout*       gobj()       { return reinterpret_cast<GdlDockLayout*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GdlDockLayout* gobj() const { return reinterpret_cast<GdlDockLayout*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GdlDockLayout* gobj_copy();

private:


protected:
  DockLayout(Dock& dock);

public:
  
  static Glib::RefPtr<DockLayout> create(Dock& dock);

  
  void attach(const Glib::RefPtr<DockMaster>& master);
  
  
  bool load_layout(const Glib::ustring& name);
  
  
  void save_layout(const Glib::ustring& name);
  
  
  void delete_layout(const Glib::ustring& name);
  
  
  Glib::ListHandle<Glib::ustring> get_layouts(bool include_default);
  
  
  void run_manager();
  
  
  bool load_from_file(const std::string& filename);
  
  
  bool save_to_file(const std::string& filename);
  
  
  bool is_dirty() const;
  
  
  Gtk::Widget* get_layouts_ui();
  
  
  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Vrai si les dispositions ont changé et ont besoin d'être enregistrés dans un fichier.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<bool> property_dirty() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Objet GdlDockMaster auquel l'objet de disposition est attaché.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<DockMaster> > property_master() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Objet GdlDockMaster auquel l'objet de disposition est attaché.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<DockMaster> > property_master() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

protected:
  //GTK+ Virtual Functions (override these to change behaviour):
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

  //Default Signal Handlers::
#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


};

} // namespace Gdl


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gdl::DockLayout
   */
  Glib::RefPtr<Gdl::DockLayout> wrap(GdlDockLayout* object, bool take_copy = false);
}


#endif /* _GDLMM_DOCKLAYOUT_H */

